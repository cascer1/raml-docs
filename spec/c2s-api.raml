#%RAML 0.8
title: GlobalCollect client-to-server (C2S) API

version: v1
protocols: [ HTTP, HTTPS ]
baseUri: https://{domainname}/client/{version}
baseUriParameters:
  domainname:
    description: domainname
    default: api.globalcollect.com

documentation:
  - title: Welcome
    content: |
      Welcome to the documentation for the GlobalCollect client-to-Server API
      On this page you can find information about all possible calls and their specification

schemas:
  # errors
  - ErrorResponse: !include errors/ErrorResponse.json

  # product
  - Directory: !include product/Directory.json
  - PaymentProductResponse: !include product/PaymentProductResponse.json
  - PaymentProducts: !include product/PaymentProducts.json

  # productgroup
  - PaymentProductGroupResponse: !include product/PaymentProductGroupResponse.json
  - PaymentProductGroups: !include product/PaymentProductGroups.json

  # publickey
  - PublicKey: !include publickey/PublicKey.json

  # services
  - GetIINDetailsRequest: !include services/GetIINDetailsRequest.json
  - GetIINDetailsResponse: !include services/GetIINDetailsResponse.json
  - ConvertAmount: !include services/ConvertAmount.json

traits:
  - canReturn400:
      responses:
        400:
          description: There was an error in the request
          body:
            application/json:
              schema: ErrorResponse
              example : |
                {
                  "errorId": "15eabcd5-30b3-479b-ae03-67bb351c07e6-00000092",
                  "errors": [
                    {
                      "code": "20000000",
                      "propertyName": "bankAccountBban.accountNumber",
                      "message": "PARAMETER_NOT_FOUND_IN_REQUEST"
                    }
                  ]
                }

/{customerId}:

  ##          ##
  ## Products ##
  ##          ##
  /products:
    displayName: Products
    description: Get information about payment products

    get:
      is: [ canReturn400 ]
      description: Get payment products
      queryParameters:
        countryCode:
          type: string
          example: NL
          required: true
        currencyCode:
          type: string
          example: EUR
          required: true
        locale:
          type: string
          example: en_US
          required: false
        amount:
          type: integer
          example: 1000
          required: false
          maximum: 9223372036854775807
        isRecurring:
          type: boolean
          example: true
          required: false
        hide:
          type: string
          enum: [ "accountsOnFile", "fields" ]
          example: accountsOnFile
          description: hides accountsOnFile and/or fields from the response
          required: false
          repeat: true
      responses:
        200:
          body:
            application/json:
              schema: PaymentProducts
              example: |
                {
                  "paymentProducts": [
                    {
                      "allowsRecurring": true,
                      "allowsTokenization": true,
                      "displayHints": {
                        "displayOrder": 20,
                        "label": "Visa",
                        "logo": "/templates/master/global/css/img/ppimages/pp_logo_1_v1.png"
                      },
                      "id": 1,
                      "maxAmount": 1000000,
                      "mobileIntegrationLevel": "OPTIMISED_SUPPORT",
                      "paymentMethod": "card",
                      "paymentProductGroup": "cards"
                    },
                    {
                      "allowsRecurring": true,
                      "allowsTokenization": true,
                      "displayHints": {
                        "displayOrder": 19,
                        "label": "American Express",
                        "logo": "/templates/master/global/css/img/ppimages/pp_logo_2_v1.png"
                      },
                      "id": 2,
                      "maxAmount": 1000000,
                      "mobileIntegrationLevel": "OPTIMISED_SUPPORT",
                      "paymentMethod": "card",
                      "paymentProductGroup": "cards"
                    },
                    {
                      "allowsRecurring": true,
                      "allowsTokenization": true,
                      "displayHints": {
                        "displayOrder": 18,
                        "label": "MasterCard",
                        "logo": "/templates/master/global/css/img/ppimages/pp_logo_3_v1.png"
                      },
                      "id": 3,
                      "maxAmount": 1000000,
                      "mobileIntegrationLevel": "OPTIMISED_SUPPORT",
                      "paymentMethod": "card",
                      "paymentProductGroup": "cards"
                    }
                  ]
                }

    /{paymentProductId}:
      uriParameters:
        paymentProductId:
          displayName: paymentProductId
          type: integer
          maximum: 2147483647
      get:
        description: Get payment product
        queryParameters:
          countryCode:
            type: string
            example: NL
            required: true
          currencyCode:
            type: string
            example: EUR
            required: true
          locale:
            type: string
            example: en_US
            required: false
          amount:
            type: integer
            example: 1000
            required: false
            maximum: 9223372036854775807
          isRecurring:
            type: boolean
            example: true
            required: false
          hide:
            type: string
            enum: [ "accountsOnFile", "fields" ]
            example: accountsOnFile
            description: hides accountsOnFile and/or fields from the response
            required: false
            repeat: true
        responses:
          200:
            body:
              application/json:
                schema: PaymentProductResponse
                example: |
                  {
                    "allowsRecurring": true,
                    "allowsTokenization": true,
                    "displayHints": {
                      "displayOrder": 20,
                      "label": "Visa",
                      "logo": "/templates/master/global/css/img/ppimages/pp_logo_1_v1.png"
                    },
                    "fields": [
                      {
                        "dataRestrictions": {
                          "isRequired": true,
                          "validators": {
                            "length": {
                              "maxLength": 19,
                              "minLength": 12
                            },
                            "luhn": {
                              
                            }
                          }
                        },
                        "displayHints": {
                          "displayOrder": 10,
                          "formElement": {
                            "type": "text"
                          },
                          "label": "Card number:",
                          "mask": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",
                          "obfuscate": false,
                          "placeholderLabel": "**** **** **** ****",
                          "preferredInputType": "IntegerKeyboard"
                        },
                        "id": "cardNumber",
                        "type": "numericstring"
                      },
                      {
                        "dataRestrictions": {
                          "isRequired": true,
                          "validators": {
                            "expirationDate": {
                              
                            },
                            "length": {
                              "maxLength": 4,
                              "minLength": 4
                            },
                            "regularExpression": {
                              "regularExpression": "(?:0[1-9]|1[0-2])[0-9]{2}"
                            }
                          }
                        },
                        "displayHints": {
                          "displayOrder": 20,
                          "formElement": {
                            "type": "text"
                          },
                          "label": "Expiry date:",
                          "mask": "{{99}}/{{99}}",
                          "obfuscate": false,
                          "placeholderLabel": "MM/YY",
                          "preferredInputType": "IntegerKeyboard"
                        },
                        "id": "expiryDate",
                        "type": "expirydate"
                      },
                      {
                        "dataRestrictions": {
                          "isRequired": false,
                          "validators": {
                            "length": {
                              "maxLength": 4,
                              "minLength": 3
                            },
                            "regularExpression": {
                              "regularExpression": "^[0-9]{3}[0-9]?$"
                            }
                          }
                        },
                        "displayHints": {
                          "displayOrder": 24,
                          "formElement": {
                            "type": "text"
                          },
                          "label": "CVV:",
                          "mask": "{{9999}}",
                          "obfuscate": false,
                          "placeholderLabel": "123",
                          "preferredInputType": "IntegerKeyboard",
                          "tooltip": {
                            "image": "/templates/master/global/css/img/ppimages/ppf_cvv_v1.png",
                            "label": "The CVV is a 3 or 4 digit code embossed or imprinted on your card."
                          }
                        },
                        "id": "cvv",
                        "type": "numericstring"
                      }
                    ],
                    "id": 1,
                    "maxAmount": 1000000,
                    "mobileIntegrationLevel": "OPTIMISED_SUPPORT",
                    "paymentMethod": "card",
                    "paymentProductGroup": "cards"
                  }
          400:
            body:
              application/json:
                schema: ErrorResponse
                example: |
                  {
                    "errorId": "657b10da-d2f9-4088-a948-bf190ef516b1-00000213",
                    "errors": [
                      {
                        "code": "1070",
                        "message": "INVALID_PAYMENT_PRODUCT_ID"
                      }
                    ]
                  }

      /directory:
        get:
          is: [ canReturn400 ]
          description: Get payment product directory
          queryParameters:
            countryCode:
              type: string
              example: NL
              required: true
            currencyCode:
              type: string
              example: EUR
              required: true
          responses:
            200:
              body:
                application/json:
                  schema: Directory
                  example: |
                    {
                      "entries" : [ {
                        "countryNames" : [ "Nederland" ],
                        "issuerId" : "ABNANL2A",
                        "issuerList" : "short",
                        "issuerName" : "ABN Amro Bank"
                      }, {
                        "countryNames" : [ "Nederland" ],
                        "issuerId" : "ASNBNL21",
                        "issuerList" : "long",
                        "issuerName" : "ASN Bank"
                      } ]
                    }
            404:
              body:
                application/json:
                  schema: ErrorResponse
                  example: |
                    {
                      "errorId": "3caa7750-a076-48b2-9402-3cb9eea613a6-00001532",
                      "errors": [
                        {
                          "code": "210390",
                          "message": "NO DIRECTORY FOUND"
                        }
                      ]
                    }

  ##               ##
  ## ProductGroups ##
  ##               ##
  /productgroups:
    displayName: Product Groups
    description: Get information about payment product groups

    get:
      is: [ canReturn400 ]
      description: Get payment product groups
      queryParameters:
        countryCode:
          type: string
          example: NL
          required: true
        currencyCode:
          type: string
          example: EUR
          required: true
        locale:
          type: string
          example: en_US
          required: false
        amount:
          type: integer
          example: 1000
          required: false
          maximum: 9223372036854775807
        isRecurring:
          type: boolean
          example: true
          required: false
        hide:
          type: string
          enum: [ "accountsOnFile", "fields" ]
          example: accountsOnFile
          description: hides accountsOnFile and/or fields from the response
          required: false
          repeat: true
      responses:
        200:
          body:
            application/json:
              schema: PaymentProductGroups
              example: |
                {
                  "paymentProductGroups": [
                    {
                      "displayHints": {
                        "displayOrder": 20,
                        "label": "Cards",
                        "logo": "/templates/master/global/css/img/ppimages/group-card.png"
                      },
                      "id": "cards"
                    }
                  ]
                }

    /{paymentProductGroupId}:
      uriParameters:
        paymentProductGroupId:
          displayName: paymentProductGroupId
          type: string
          example: cards
      get:
        is: [ canReturn400 ]
        description: Get payment product group
        queryParameters:
          countryCode:
            type: string
            example: NL
            required: true
          currencyCode:
            type: string
            example: EUR
            required: true
          locale:
            type: string
            example: en_US
            required: false
          amount:
            type: integer
            example: 1000
            required: false
            maximum: 9223372036854775807
          isRecurring:
            type: boolean
            example: true
            required: false
          hide:
            type: string
            enum: [ "accountsOnFile", "fields" ]
            example: accountsOnFile
            description: hides accountsOnFile and/or fields from the response
            required: false
            repeat: true
        responses:
          200:
            body:
              application/json:
                schema: PaymentProductGroupResponse
                example: |
                  {
                    "displayHints": {
                      "displayOrder": 20,
                      "label": "Cards",
                      "logo": "/templates/master/global/css/img/ppimages/group-card.png"
                    },
                    "fields": [
                      {
                        "dataRestrictions": {
                          "isRequired": true,
                          "validators": {
                            "length": {
                              "maxLength": 19,
                              "minLength": 12
                            },
                            "luhn": {
                              
                            }
                          }
                        },
                        "displayHints": {
                          "displayOrder": 10,
                          "formElement": {
                            "type": "text"
                          },
                          "label": "Card number:",
                          "mask": "{{9999}} {{9999}} {{9999}} {{9999}} {{999}}",
                          "obfuscate": false,
                          "placeholderLabel": "**** **** **** ****",
                          "preferredInputType": "IntegerKeyboard"
                        },
                        "id": "cardNumber",
                        "type": "numericstring"
                      },
                      {
                        "dataRestrictions": {
                          "isRequired": true,
                          "validators": {
                            "expirationDate": {
                              
                            },
                            "length": {
                              "maxLength": 4,
                              "minLength": 4
                            },
                            "regularExpression": {
                              "regularExpression": "(?:0[1-9]|1[0-2])[0-9]{2}"
                            }
                          }
                        },
                        "displayHints": {
                          "displayOrder": 20,
                          "formElement": {
                            "type": "text"
                          },
                          "label": "Expiry date:",
                          "mask": "{{99}}/{{99}}",
                          "obfuscate": false,
                          "placeholderLabel": "MM/YY",
                          "preferredInputType": "IntegerKeyboard"
                        },
                        "id": "expiryDate",
                        "type": "expirydate"
                      },
                      {
                        "dataRestrictions": {
                          "isRequired": false,
                          "validators": {
                            "length": {
                              "maxLength": 4,
                              "minLength": 3
                            },
                            "regularExpression": {
                              "regularExpression": "^[0-9]{3}[0-9]?$"
                            }
                          }
                        },
                        "displayHints": {
                          "displayOrder": 24,
                          "formElement": {
                            "type": "text"
                          },
                          "label": "CVV:",
                          "mask": "{{9999}}",
                          "obfuscate": false,
                          "placeholderLabel": "123",
                          "preferredInputType": "IntegerKeyboard",
                          "tooltip": {
                            "image": "/templates/master/global/css/img/ppimages/ppf_cvv_v1.png",
                            "label": "The CVV is a 3 or 4 digit code embossed or imprinted on your card."
                          }
                        },
                        "id": "cvv",
                        "type": "numericstring"
                      }
                    ],
                    "id": "cards"
                  }
          404:
            body:
              application/json:
                schema: ErrorResponse
                example: |
                  {
                    "errorId": "657b10da-d2f9-4088-a948-bf190ef516b1-00000213",
                    "errors": [
                      {
                        "code": "1070",
                        "message": "INVALID_PAYMENT_PRODUCT_GROUP_ID"
                      }
                    ]
                  }


  ##          ##
  ## Services ##
  ##          ##
  /services:
    displayName: Services
    description: Several services to help you

    /convert/amount:
      get:
        is: [ canReturn400 ]
        description: Convert amount
        queryParameters:
          source:
            displayName: Source
            type: string
            description: The source currency
            example: EUR
            required: true
          target:
            displayName: Target
            type: string
            description: The currency to convert to
            example: USD
            required: true
          amount:
            displayName: Amount
            type: integer 
            description: The amount of source currency
            example: 100
            required: true
            maximum: 9223372036854775807
        responses:
          200:
            body:
              application/json:
                schema: ConvertAmount
                example: |
                  {
                    "convertedAmount": 138
                  }

    /getIINdetails:
      post:
        is: [ canReturn400 ]
        description: Get IIN details
        body:
          application/json:
            schema: GetIINDetailsRequest
            example: |
              {
                "bin": "54694894848"
              }
        responses:
          200:
            body:
              application/json:
                schema: GetIINDetailsResponse
                example: |
                  {
                    "countryCode": "RU",
                    "paymentProductId": 3
                  }
          404:
            body:
              application/json:
                schema: ErrorResponse
                example: |
                  {
                    "errorId": "657b10da-d2f9-4088-a948-bf190ef516b1-00000312",
                    "errors": [
                      {
                        "code": "210380",
                        "propertyName": "bin",
                        "message": "NO BIN RANGE FOUND"
                      }
                    ]
                  }

  ##            ##
  ## Public Key ##
  ##            ##
  /crypto:
    displayName: Crypto
    description: Get the public key
    /publickey:
      get:
        description: Get public key
        responses:
          200:
            body:
              application/json:
                schema: PublicKey
                example: |
                  {
                    "keyId": "86b64e4e-f43e-4a27-9863-9bbd5b499f82",
                    "publicKey": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkiJlGL1QjUnGDLpMNBtZPYVtOU121jfFcV4WrZayfw9Ib/1AtPBHP/0ZPocdA23zDh6aB+QiOQEkHZlfnelBNnEzEu4ibda3nDdjSrKveSiQPyB5X+u/IS3CR48B/g4QJ+mcMV9hoFt6Hx3R99A0HWMs4um8elQsgB11MsLmGb1SuLo0S1pgL3EcckXfBDNMUBMQ9EtLC9zQW6Y0kx6GFXHgyjNb4yixXfjo194jfhei80sVQ49Y/SHBt/igATGN1l18IBDtO0eWmWeBckwbNkpkPLAvJfsfa3JpaxbXwg3rTvVXLrIRhvMYqTsQmrBIJDl7F6igPD98Y1FydbKe5QIDAQAB"
                  }
